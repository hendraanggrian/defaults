package com.hendraanggrian.prefy.internal;

import com.hendraanggrian.prefy.EditablePreferences;
import com.hendraanggrian.prefy.PreferencesEditor;
import com.hendraanggrian.prefy.PreferencesSaver;
import com.hendraanggrian.prefy.ReadablePreferences;
import com.hendraanggrian.prefy.WritablePreferences;

/**
 * Parent class of any class generated by `prefy-compiler` (should they are being used in the project).
 * It behaves similarly as {@link ReadablePreferences} with simpler API for generated sources to use.
 */
public abstract class PreferencesBinding implements PreferencesSaver {
    private final ReadablePreferences source;

    protected PreferencesBinding(ReadablePreferences source) {
        this.source = source;
    }

    protected final String get(String key, String defaultValue) {
        return source.getOrDefault(key, defaultValue);
    }

    protected final boolean get(String key, boolean defaultValue) {
        return source.getBooleanOrDefault(key, defaultValue);
    }

    protected final double get(String key, double defaultValue) {
        return source.getDoubleOrDefault(key, defaultValue);
    }

    protected final float get(String key, float defaultValue) {
        return source.getFloatOrDefault(key, defaultValue);
    }

    protected final long get(String key, long defaultValue) {
        return source.getLongOrDefault(key, defaultValue);
    }

    protected final int get(String key, int defaultValue) {
        return source.getIntOrDefault(key, defaultValue);
    }

    protected final short get(String key, short defaultValue) {
        return source.getShortOrDefault(key, defaultValue);
    }

    protected final byte get(String key, byte defaultValue) {
        return source.getByteOrDefault(key, defaultValue);
    }

    protected final PreferencesEditor getEditor() {
        if (source instanceof WritablePreferences) {
            return (PreferencesEditor) source;
        } else if (source instanceof EditablePreferences) {
            return ((EditablePreferences) source).getEditor();
        } else {
            throw new RuntimeException("Unrecognizable preferences instance");
        }
    }
}
